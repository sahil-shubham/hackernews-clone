// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  comments  Comment[]
  votes     Vote[]
  
  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  url         String?
  textContent String?
  type        PostType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]
  
  @@map("posts")
}

model Comment {
  id          String   @id @default(cuid())
  textContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies     Comment[] @relation("CommentToComment")
  votes       Vote[]
  
  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  voteType  VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // A user can only vote once on a post or comment
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("votes")
}

enum PostType {
  LINK
  TEXT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
} 