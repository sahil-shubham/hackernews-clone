// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts                  Post[]
  comments               Comment[]
  votes                  Vote[]
  notifications          Notification[] @relation("UserNotifications")
  triggeredNotifications Notification[] @relation("TriggeredNotifications")

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  url         String?
  textContent String?
  type        PostType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  votes         Vote[]
  notifications Notification[]

  @@index([authorId])
  @@index([createdAt])
  @@map("posts")
}

model Comment {
  id          String   @id @default(cuid())
  textContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId        String
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId      String?
  parent        Comment?       @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies       Comment[]      @relation("CommentToComment")
  votes         Vote[]
  notifications Notification[]

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
  @@index([createdAt])
  @@index([postId, parentId, createdAt(sort: Desc)])
  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  voteType  VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // A user can only vote once on a post or comment
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@map("votes")
}

model Notification {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)
  type      NotificationType

  recipientId String
  recipient   User   @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  // The user who performed the action that triggered the notification
  triggeringUserId String
  triggeringUser   User   @relation("TriggeredNotifications", fields: [triggeringUserId], references: [id], onDelete: Cascade)

  // Optional fields to link to the source of the notification
  postId    String? // If it's related to a post (e.g. new comment on your post)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String? // If it's related to a comment (e.g. reply to your comment or new comment if post is also linked)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([recipientId, read, createdAt]) // For efficient querying of user's unread notifications
  @@map("notifications")
}

enum PostType {
  LINK
  TEXT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum NotificationType {
  NEW_COMMENT_ON_POST // Someone commented on your post
  REPLY_TO_COMMENT // Someone replied to your comment
  // Potentially others like NEW_VOTE_ON_POST, NEW_VOTE_ON_COMMENT etc.
}
