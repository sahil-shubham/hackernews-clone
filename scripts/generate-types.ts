import fs from 'fs';
import path from 'path';
import { zodToTs, printNode, createTypeAlias } from 'zod-to-ts';
import { z } from 'zod';

const schemasDir = path.resolve('src/lib/schemas');
const typesDir = path.resolve('src/types');

async function generateTypes() {
  if (!fs.existsSync(typesDir)) {
    fs.mkdirSync(typesDir, { recursive: true });
  }

  const schemaFiles = fs.readdirSync(schemasDir).filter(file => file.endsWith('.ts'));

  for (const file of schemaFiles) {
    const schemaFilePath = path.join(schemasDir, file);
    const typeFileName = file;
    const typeFilePath = path.join(typesDir, typeFileName);

    try {
      const modulePath = `file://${schemaFilePath}?update=${Date.now()}`;
      const schemaModule = await import(modulePath);
      let generatedTypes = `// Auto-generated by zod-to-ts. Do not edit.\n// This file is generated from ${path.relative(path.resolve('.'), schemaFilePath)}\n`;

      let hasZodExports = false;
      for (const exportName in schemaModule) {
        const exportedItem = schemaModule[exportName];
        if (exportedItem instanceof z.ZodType) {
          hasZodExports = true;
          let typeName = exportName;
          if (typeName.toLowerCase().endsWith('schema')) {
            typeName = typeName.slice(0, -6);
          }
          typeName = typeName.charAt(0).toUpperCase() + typeName.slice(1);
          if (!typeName) typeName = "GeneratedType";

          const { node } = zodToTs(exportedItem, typeName);
          const typeAlias = createTypeAlias(node, typeName);
          generatedTypes += `\nexport ${printNode(typeAlias)}\n`;
        }
      }

      if (hasZodExports) {
        fs.writeFileSync(typeFilePath, generatedTypes);
        console.log(`Generated types for ${file} -> ${typeFileName}`);
      } else {
        console.log(`No Zod schemas found in ${file} to generate types. If this file previously contained manual types, it might be overwritten if it shares a name with a schema file.`);
      }

    } catch (error) {
      console.error(`Error processing ${file}:`, error);
    }
  }
  console.log('Type generation complete.');
}

generateTypes(); 